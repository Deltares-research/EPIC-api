name: ci

on: [push]

jobs:

  CI:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        # os: [ubuntu-18.04, macos-latest, windows-latest]
        os: [ubuntu-18.04]
    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.8
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Generate secret files
        run: |
          python -c "import secrets; from pathlib import Path; Path('.django_secrets').write_text(secrets.token_hex(16)); Path('.django_debug').write_text('True')"

      - name: Install Dependencies
        run: |
          poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Make django migrations
        run: |
          poetry run python manage.py makemigrations
          poetry run python manage.py migrate

      - name: Test with pytest
        run: |
          poetry run pytest --cov . --cov-report xml:coverage-reports/coverage-epictool-api.xml --junitxml=xunit-reports/xunit-result-epictool-api.xml

      - name: Autoformat code if the check fails
        if: ${{ (matrix.os == 'ubuntu-18.04') && (matrix.python-version == 3.8) }}
        run: |
          poetry run isort .
          poetry run black .
          git config --global user.name '${{ github.actor }}'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "autoformat: isort & black" && git push || true

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   if: ${{ (matrix.os == 'ubuntu-18.04') && (matrix.python-version == 3.8) }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}